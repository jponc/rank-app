service: rank-app

provider:
  name: aws
  runtime: go1.x
  profile: uptactics
  memorySize: 128
  region: us-east-1 # US East 1 (N. Virginia)
  stage: ${opt:stage, 'staging'}
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.tableName}*'
      Action:
        - "dynamodb:*"
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords

functions:
  # == HTTP ==
  SayHello:
    handler: bin/SayHello
    events:
      - http:
          path: /hello
          method: post

  # == HTTP ==

  # == SNS ==
  RunCrawl:
    handler: bin/RunCrawl
    events:
      - sns: ${self:service}-${self:provider.stage}-RunCrawl
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      KEYWORDS: ${self:custom.env.KEYWORDS}

  ProcessKeyword:
    handler: bin/ProcessKeyword
    events:
      - sns: ${self:service}-${self:provider.stage}-ProcessKeyword
    timeout: 60 # 1 Minute timeout to fetch data from Zenserp
    environment:
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}

  AddCrawlResultToLatest:
    handler: bin/AddCrawlResultToLatest
    events:
      - sns: ${self:service}-${self:provider.stage}-CrawlResultCreated
    environment:
      DB_TABLE_NAME: ${self:custom.env.DB_TABLE_NAME}

  # == SNS ==

custom:
  tableName: ${self:service}-${self:provider.stage}
  env:
    SNS_PREFIX: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:service}-${self:provider.stage}'
    KEYWORDS: ${ssm:/${self:service}/${self:provider.stage}/KEYWORDS}
    ZENSERP_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/ZENSERP_API_KEY~true}
    DB_TABLE_NAME: ${self:custom.tableName}

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI-SK-PK # Inverted PK/SK
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

